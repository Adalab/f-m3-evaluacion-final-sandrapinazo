{"version":3,"sources":["components/CharacterCard/index.js","components/CharacterList/index.js","components/Filter/index.js","components/CharacterDetail/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","style","backgroundImage","concat","image","alt","name","house","CharacterList","data","map","item","key","id","react_router_dom","to","components_CharacterCard","Filter","htmlFor","type","onChange","handler","value","placeholder","CharacterDetails","console","log","_props$data","yearOfBirth","alive","patronus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","characters","filter","setFilter","bind","assertThisInitialized","getData","_this2","fetch","then","response","json","newData","index","objectSpread","setState","event","target","_this3","react_router","exact","path","render","routerProps","Fragment","components_Filter","components_CharacterList","toUpperCase","includes","CharacterDetail","find","parseInt","match","params","React","Component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01447c25.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport './styles.scss';\n\nfunction CharacterCard (props) {\n//    const bgColor = props.house==='Gryffindor'? '#6d0000': props.house==='Slytherin'? '#003a01': props.house==='Ravenclaw'? '#01053a': props.house==='Hufflepuff'? '#c19a24' : 'grey';\n    return (\n        <div className=\"CharacterCard__card\" >\n            <div className='CharacterCard__image' style={{backgroundImage: `url(${props.image})`}} alt={props.name}/>\n            <h2 className='CharacterCard__name'>{props.name}</h2>\n            <p className={`CharacterCard__p ${props.house}`}  >{props.house? props.house : 'no house'}</p>\n        </div>\n    );\n}\n\nCharacterCard.propTypes = {\n    image: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    house: propTypes.string,\n};\n\nexport default CharacterCard;","import React from \"react\";\nimport CharacterCard from \"../CharacterCard\";\nimport propTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport './styles.css'\n\nfunction CharacterList(props) {\n  return (\n    <ul className=\"CharacterList__list\">\n      {props.data.map(item => {\n        return (\n          <li key={item.id} >\n            <Link to={`/${item.id}`} className=\"CharacterList__link\">\n              <CharacterCard\n                name={item.name}\n                house={item.house}\n                image={item.image}\n              />\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nCharacterList.propTypes = {\n  data: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default CharacterList;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './styles.scss'\n\nfunction Filter(props) {\n    return(\n        <form>\n            <label htmlFor='filter'>Search character:</label>\n            <input className='Filter__input' name='filter' id='filter' type='text' onChange={props.handler} value={props.value} placeholder=\"Harry Potter\" />\n        </form>\n    );\n}\n\nFilter.propTypes = {\n    handler: propTypes.func.isRequired,\n    value: propTypes.string.isRequired,\n}\n\nexport default Filter;","import React from \"react\";\nimport propTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport './styles.scss'\n\nfunction CharacterDetails(props) {\n  if (!props.data) { return ('Loading...')}\n  else {\n    console.log(props);\n    const { name, house, yearOfBirth, image, alive, patronus } = props.data;\n    return (\n      <div className='CharacterDetails__page'>\n        <div className='CharacterDetails__image' style={{backgroundImage: `url(${image})`}} alt={name}></div>\n        <section className='CharacterDetails__info'>\n        <h1 className='CharacterDetails__name'>{name}</h1>\n        <div className={house? `CharacterDetails__house ${house}__crest`: 'hidden'}></div>\n        <p>Year of birth: {yearOfBirth}</p>\n        <p>Patronus: {patronus}</p>\n        <p>State: {alive? 'Alive at the end of the saga': 'Dead at the end of the saga' }</p>\n        <Link className='CharacterDetails__back' to='/'>Go back</Link>\n        </section>\n      </div>\n    );\n  }\n  }\n\n\nCharacterDetails.propTypes={\n    data: propTypes.object.isRequired,\n}\n\nexport default CharacterDetails;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport CharacterList from \"./components/CharacterList\";\nimport Filter from \"./components/Filter\";\nimport CharacterDetail from \"./components/CharacterDetail\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      characters: [],\n      filter: \"\"\n    };\n    this.setFilter = this.setFilter.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData() {\n    fetch(\"https://hp-api.herokuapp.com/api/characters\")\n      .then(response => response.json())\n      .then(data => {\n        const newData = data.map((item, index) => {\n          return { ...item, id: index + 1 };\n        });\n        return this.setState({\n          characters: newData\n        });\n      });\n  }\n\n  setFilter(event) {\n    return this.setState({\n      filter: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App__title\">Harry Potter Characters</h1>\n        </header>\n        <main>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={routerProps => (\n                <React.Fragment>\n                  <Filter handler={this.setFilter} value={this.state.filter} />\n                  <CharacterList\n                    data={this.state.characters.filter(item =>\n                      item.name\n                        .toUpperCase()\n                        .includes(this.state.filter.toUpperCase())\n                    )}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route\n              path=\"/:id\"\n              render={routerProps => {\n                console.log(routerProps, this.state.characters);\n                return (\n                  <CharacterDetail\n                    data={this.state.characters.find(\n                      item => item.id === parseInt(routerProps.match.params.id)\n                    )}\n                  />\n                );\n              }}\n            />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from 'react-router-dom';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}